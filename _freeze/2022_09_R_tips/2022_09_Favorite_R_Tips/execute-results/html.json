{
  "hash": "ba51c31242aa99e53fc7d304eec2ba2e",
  "result": {
    "markdown": "---\ntitle: \"Our favorite R tips and tricks\"\nauthor: \"Selina Baldauf\"\ndate: \"2022-09-28\"\nformat: \n  revealjs:\n    theme: [moon, ../css/rladies.scss]\n    show-slide-number: all\n    slide-number: true\n    code-copy: true\n    code-link: true\n    incremental: true\n    transition: slide\n    fig-align: center\nexecute: \n  eval: false\n  echo: true\n---\n\n\n# R Studio projects {background-color='#562457'}\n\n## Project oriented workflow with RStudio\n\n::: columns\n\n:::{.column width=\"58%\"}\n\n:::{.nonincremental}\n- One directory with all files relevant for project\n  - Scripts, data, plots, documents, ...\n- An RStudio project is just a normal directory with an `*.Rproj` file\n:::\n:::\n\n::: {.column width=\"38%\"}\n\n```{}\nProject\n|\n|- data\n|\n|- documents\n|   |\n|   |- notes\n|   |\n|   |- reports\n|\n|- analysis\n|   |\n|   |- clean_data.R \n|   |\n|   |- statistics.R\n|\n|- *.RProj\n```\n\n:::\n\n:::\n\n## Project oriented workflow with RStudio\n\n::: columns\n\n:::{.column width=\"58%\"}\n\n**Main advantages of R Studio projects**\n\n- Easy to navigate project in R Studio (`File` pane)\n- Project root is working directory\n- Open multiple projects simultaneously in separate RStudio instances\n- Portability / Reproducibility\n\n:::\n\n::: {.column width=\"38%\"}\n\n```{}\nProject\n|\n|- data\n|\n|- documents\n|   |\n|   |- notes\n|   |\n|   |- reports\n|\n|- analysis\n|   |\n|   |- clean_data.R \n|   |\n|   |- statistics.R\n|\n|- *.RProj\n```\n\n:::\n\n:::\n\n. . .\n\nThis means **no more `setwd()`!**\n\n\n## Create an RStudio project\n\nCreate a project from scratch:\n\n1. `File -> New Project -> New Directory -> New Project`\n2. Enter a directory name (this will be the name of your project)\n3. Choose the Directory where the project should be saved\n4. `Create Project`\n\n:::{.fragment}\nR Studio will now create and open the project for you.\n:::\n\n## Cool things to do with a project {.smaller .scrollable}\n\n::: panel-tabset\n\n### Manage project\n\n![](img/project_manage.png){width=\"650\"}\n\n:::{.nonincremental}\n- Create folders and files\n- Rename, Move and delete files\n- Copy files\n- ...\n:::\n\n### Navigate Project inside R Studio\n\n![](img/RStudio_Files_navig.png){width=\"900\"}\n\n### Open project in R Studio\n\nClick on the project symbol on the top right of R Studio and select the project from the list.\n\n:::{.nonincremental}\n- Open in same session\n- Open in new session\n:::\n\n![](img/open_project_rstudio.png)\n\n### Open project outside R Studio\n\nJust click on the `.Rproj` file in the folder and R Studio opens the project.\n\n![](img/open_project.png)\n\n:::\n\n# Good coding practice {background-color='#562457'}\n\n## Good practice coding styling {.scrollable}\n\nConsistent and good practice coding style is important especially if you share \nyour code with other people.\n\n. . .\n\n:::panel-tabset\n\n### White space\n\nUse white space around operators, `=`, `<-`, ...\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# works but not so nice\na<-3\nmean(x=c(1,2,3))\n2==2\n\n# better\na <- 3\nmean(x = c(1,2,3))\n2 == 2\n```\n:::\n\n\n### Line width\n\nLimit the width of a line of code and start a new line regularly. \nA standard is 80 characters.\n\n:::{.fragment}\nInstead of this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This is a very bad example of extremely wide code with comments and if you want to read it you really have to scroll to the right\nggplot(mtcars, aes(hp, mpg, color = am)) + geom_point() +  geom_smooth(formula = y ~ x, method = \"loess\")\n```\n:::\n\n:::\n\n:::{.fragment}\ndo this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This is a very bad example of extremely wide code with comments and if you \n# want to read it you really have to scroll to the right\nggplot(mtcars, aes(hp, mpg, color = am)) + \n  geom_point() +  \n  geom_smooth(formula = y ~ x, method = \"loess\")\n```\n:::\n\n:::\n\n:::\n\n## Good practice coding styling {.smaller .scrollable}\n\nSome R Studio settings help you with keeping the good practice.\n\n:::panel-tabset\n\n### White space\n\n:::columns\n\n:::{.column width=\"58%\"}\nRStudio can let you know in the side bar, if you are missing white space that is recommended. \n:::\n\n:::{.column width=\"38%\"}\n![](img/info_whitespace.png){width=\"358\"}\n:::\n\n:::\n\n:::{.fragment}\n`Tools -> Global Options -> Code -> Diagnostics -> Provide R style diagnostics`\n\n![](img/whitespace_diagn.png){width=\"379\"}\n:::\n\n### Line width\n\nThere is a setting in RStudio that helps you with this. It puts a very thin, vertical line into each of your scripts to show you where you should better start a new line. To turn this on go to `Tools -> Global Options -> Code -> Display`, put a checkmark for `Show margin`\n\n![](img/margins_rstudio.png){width=\"396\"}\n\n:::\n\n## Automatic code styling with [`styler`](https://styler.r-lib.org/) {.scrollable .smaller}\n\nPackage adds an Addin to R Studio and lets you style your code automatically.^[Find package documentation [here](https://styler.r-lib.org/)]\n\n. . .\n\n**Step 1: Install the package**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"styler\")\n```\n:::\n\n\nYou might have to restart RStudio first.\n\n. . .\n\n**Step 2: Use Addin to style your code**\n\nLook for the `Styler` sections of `Addins` (top of R Studio):\n\n![](img/styler_options.png){width=\"368\"}\n\n-   `Style selection`: highlight code (always an entire section of code, not just a small part) and highlighted section will be automatically styled for you.\n\n-   `Style active file`: Currently opened R file will be styled automatically.\n\n## Automatic code styling with [`styler`](https://styler.r-lib.org/) {.scrollable .smaller}\n\n**Step 3: Set keyboard shortcut**\n\n:::{.nonincremental}\n- `Tools -> Modify Keyboard Shortcuts`.\n- Filter for `style` \n- Assign the keyboard shortcut by typing the shortcut\n:::\n\n. . .\n\nMy keyboard shortcuts e.g. look like this:\n\n![](img/styler_shortcut.png){width=\"463\"}\n\n## Divide your code into sections\n\nInsert section headers into your code using the keyboard shortcut `Ctrl/Cmd + Shift + R`\n\n:::{.nonincremental}\n- Structure your document with sections\n- Look at document outline and jump to sections\n- Collapse sections of code\n:::\n\n![](img/code_sections.png)\n\n\n\n# Support your workflow {background-color='#562457'}\n\n`usethis`\n\n## Workflow with [`usethis`](https://usethis.r-lib.org/)\n\nGreat workflow package^[Find package documentation [here](https://usethis.r-lib.org/)] for\n\n- Package development: Create and manage files, projects, packages, templates, ...\n- Git and Github: Create and manage github repositories from R Studio\n- Configure R and R Studio\n- ...\n\n. . . \n\nGet started:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"usethis\")\nlibrary(usethis)\n```\n:::\n\n\n\n## Workflow with [`usethis`](https://usethis.r-lib.org/) {.smaller}\n\nSome examples that I find useful\n\n. . .\n\n:::panel-tabset\n\n### Git and Github\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_github_token() # helps you to setup a github personal access token\nuse_git() # initialise git repo\nuse_github() # create and connect github repository\n```\n:::\n\n\n### Manage R Studio configuration\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedit_r_profile() # Manage profile, e.g. packages that are loaded automatically\n```\n:::\n\nMy profile e.g. looks like this:\n\n:::{.fragment}\n``` r\nif (interactive()) {\n  suppressMessages(require(devtools))\n  suppressMessages(require(usethis))\n  suppressMessages(require(reprex))\n}\n\noptions(\n  ## RCompendium Credentials ----\n  given = \"Selina\", \n  family = \"Baldauf\", \n  email = \"selina.baldauf@fu-berlin.de\",\n  usethis.full_name = \"Selina Baldauf\",\n  usethis.protocol = \"ssh\",\n  usethis.description = list(\n    \"Authors@R\" = utils::person(\n      \"Selina\", \"Baldauf\",\n      email = \"selina.baldauf@fu-berlin.de\",\n      role = c(\"aut\", \"cre\")\n    ),\n    Version = \"0.0.0.9000\"\n  ),\n  reprex.show = FALSE,\n  reprex.advertise = FALSE,\n  reprex.style = TRUE\n)\n```\n:::\n\n### Package/Project development\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_project() # create an R Studio project\ncreate_package() # create an R package\nuse_r() # Add an R Script into the /R directory of package/project\n```\n:::\n\n\n:::\n\n# What are your favorite tips and tricks? {background-color='#562457'}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}